const converters=require("./converters"),caseConvert=(e,r)=>{const a=typeof e,t=Array.isArray(e),s=typeof r,c=Array.isArray(r),o=["camel","pascal","kebab","snake"];let n=!1,i="string",b="camel";if(!e&&!r||!e&&r)throw Error("Input argument is required.");if(e)if(t)i="array";else if("object"===a)i="object";else{if("string"!==a)throw Error("Input argument must be a string, array or object.");i="string"}if(r){if("object"!==s||c)throw Error("Settings argument must be an object.");if(r.case){if(!o.includes(r.case))throw Error("Settings property case must be a string and a valid case.");b=r.case}if(r.deep){if("boolean"!=typeof r.deep)throw Error("Settings property deep must be a boolean.");n=r.deep}}if("string"===i)switch(b){case"camel":return converters.camel(e);case"pascal":return converters.pascal(e);case"kebab":return converters.kebab(e);case"snake":return converters.snake(e)}if("array"===i)return e.map((e=>"object"==typeof e&&n?caseConvert(e,{case:b,deep:!0}):e));if("object"===i){let r={};for(const a in e){let t,s;const c=e[a];switch(s="object"==typeof c&&n?caseConvert(c,{case:b,deep:!0}):c,b){case"camel":t=converters.camel(a);break;case"pascal":t=converters.pascal(a);break;case"kebab":t=converters.kebab(a);break;case"snake":t=converters.snake(a)}r[t]=s}return r}};module.exports=caseConvert;
